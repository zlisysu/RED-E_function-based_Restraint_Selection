import os
import subprocess

class Gen_plumed_input():
    def __init__(self, muti_six_atm_lst, ):
        '''Initializing
        
        Parameters
        ----------
        muti_six_atm_lst: list
            A list contain the six atoms for BoreschLike restrain, like [lig1, lig2, lig3, rec1, rec2, rec3], all the lig* or rec* are atom number (starting from 1) and int datatype. 
            For the BoreschLike restraint: 
            r: DISTANCE ATOMS=lig1, rec1
            thetaA: ANGLE ATOMS=lig1, rec1, rec2
            thetaB: ANGLE ATOMS=lig2, lig1, rec1
            phiA: TORSION ATOMS=rec3, rec2, rec1, lig1
            phiB: TORSION ATOMS=rec2, rec1, lig1, lig2
            phiC: TORSION ATOMS=rec1, lig1, lig2, lig3
        '''
        self.muti_six_atm_lst = muti_six_atm_lst

    def gen_BoreschLike_measure(self, plumed_file_path, plumed_logout, output_frq):
        '''Generate the plumed input of the BoreshcLike restraint parameters measurement.

        Reference
        ----------
        1. S. Boresch, F. Tettinger, M. Leitgeb, M. Karplus, Absolute binding free energies: a quantitative approach for their calculation. J. Phys. Chem. B . 107, 9535-9551 (2003). 
        https://doi.org/10.1021/jp0217839

        Parameters
        ----------
        plumed_file_path: str
            Name of the plumed input file, which will be generated by this function. 
        plumed_logout: str
            Name of the plumed output file, which will be generated by the following molecular dynamic simulation.
        output_frq: int
            Specifies the frequence with which the collective variables of interest should be output.
        '''
        if os.path.exists(plumed_file_path):
            state = subprocess.call(f'rm {plumed_file_path}', shell=True)
        else:
            pass
        input_file=open(plumed_file_path, 'w+')
        last_line = 'PRINT ARG='
        for idx in range(0, len(self.muti_six_atm_lst)):
            lig1 = self.muti_six_atm_lst[idx][0]
            lig2 = self.muti_six_atm_lst[idx][1]
            lig3 = self.muti_six_atm_lst[idx][2]
            rec1 = self.muti_six_atm_lst[idx][3]
            rec2 = self.muti_six_atm_lst[idx][4]
            rec3 = self.muti_six_atm_lst[idx][5]
            every_meas_str = f'''r_{idx}: DISTANCE ATOMS={lig1},{rec1}
thetaA_{idx}: ANGLE ATOMS={lig1},{rec1},{rec2}
thetaB_{idx}: ANGLE ATOMS={lig2},{lig1},{rec1}
phiA_{idx}: TORSION ATOMS={rec3},{rec2},{rec1},{lig1}
phiB_{idx}: TORSION ATOMS={rec2},{rec1},{lig1},{lig2}
phiC_{idx}: TORSION ATOMS={rec1},{lig1},{lig2},{lig3}'''
            print(every_meas_str, file=input_file)
            last_line=f'{last_line}r_{idx},thetaA_{idx},thetaB_{idx},phiA_{idx},phiB_{idx},phiC_{idx},'
        last_line=f'{last_line} FILE={plumed_logout} STRIDE={output_frq}'
        flush_line=f'FLUSH STRIDE={output_frq}'
        print(last_line, file=input_file)
        print(flush_line, file=input_file)



if __name__ == '__main__':
    from .Selection_by_lig_shape import Frame, Residue, Protein, Ligand, Atom, get_res_idx_within_one_residue, ligand_shape_based_sel
    from .Selection_by_HB_pair import *
    from .Selection_by_HB_mainchain import *

    import pandas as pd
    import parmed as pmd
    import numpy as np
    import math
    from numpy import linalg as LA
    import mdtraj as md
    traj = md.load('protein.rst7', top='protein.prmtop')
    frame=Frame()
    top = traj.topology
    for i in top.atoms:
        xyz = traj.xyz[0][i.index]
        atom_x = xyz[0]
        atom_y = xyz[1]
        atom_z = xyz[2]
    #     print(atom_x)
        residue_name = i.residue.name
        residue_id = i.residue.resSeq
        atom_name = i.name
        atom_id = i.index+1
        frame.add_atom(Atom(residue_id,residue_name,atom_name,atom_id,atom_x,atom_y,atom_z))
    frame.initiate()
    atom_lig1=frame.get_lig_longest_cent_atom()
    atom_lig2=frame.get_lig_cent_atom()
    atom_lig3=frame.get_lig_3rd_atom()

    atom_rec1=frame.get_nearest_CA_atom()
    atom_rec2, atom_rec3=frame.get_nearest_CO_atom()

    dist = Atom.calc_dist(atom_lig1,atom_rec1)
    angl1 = Atom.calc_angle(atom_rec2,atom_rec1,atom_lig1)
    angl2 = Atom.calc_angle(atom_rec1,atom_lig1,atom_lig2)
    dihe1 = Atom.calc_dihedral(atom_rec3, atom_rec2, atom_rec1, atom_lig1)
    dihe2 = Atom.calc_dihedral(atom_rec2, atom_rec1, atom_lig1, atom_lig2)
    dihe3 = Atom.calc_dihedral(atom_rec1, atom_lig1, atom_lig2, atom_lig3)
    atom_lig11=frame.ligand.atom_longest1
    atom_lig12=frame.get_lig_cent_atom()
    atom_lig13=frame.get_lig_3rd_atom_byatom1(atom_lig11)

    atom_lig21=frame.ligand.atom_longest2
    atom_lig22=frame.get_lig_cent_atom()
    atom_lig23=frame.get_lig_3rd_atom_byatom1(atom_lig21)
    lig_atoms=[int(atom_lig11.get_atom_indx), int(atom_lig12.get_atom_indx), int(atom_lig13.get_atom_indx)]
    lst_z=[]
    ligname='MOL'
    within3A_res_list = get_res_idx_within_one_residue(traj, ligname, 0.3, 0)
    # print(within3A_res_list)
    #selection base on resname
    muti_three_res_atom_lst = []
    for i in within3A_res_list:
        
        res_CA = top.select(f'residue {i} and name CA')[0]+1
        res_C = top.select(f'residue {i} and name C')[0]+1
        res_O = top.select(f'residue {i} and name O')[0]+1
        single_res_list = [res_CA, res_C, res_O]
        muti_three_res_atom_lst.append(single_res_list)
    #     print(single_res_list)
        single_six = lig_atoms+single_res_list
        lst_z.append(single_six)
    grp_num1=len(lst_z)
    print(f"Selected by first_stategy: {lst_z} with number of {grp_num1}")
    lst_z_file=open('based_lig_shape', 'w+')
    print(str(lst_z), file=lst_z_file)
    lst_z_file.close()
    # Second strategy
    parm = pmd.load_file('protein.prmtop',  xyz='protein.prmcrd')
    a = Sel_rest_atm_hb_pair_based(traj, parm)
    lst_a = a.get_final_res_lst()
    grp_num2=len(lst_a)
    print(f"Selected by second_stategy: {lst_a} with number of {grp_num2}")
    lst_a_file = open('based_HB_pair', 'w+')
    print(str(lst_a), file=lst_a_file)
    lst_a_file.close()
    # Third strategy
    b = Sel_rest_atm_hb_mainchain_based(traj, parm)
    lst_b = b.get_final_res_lst()
    grp_num3=len(lst_b)
    print(f"Selected by third_stategy: {lst_b} with number of {grp_num3}")
    lst_b_file = open('based_HB_mainchain', 'w+')
    print(lst_b, file=lst_b_file)
    lst_b_file.close()
    six_atoms=[]
    six_atoms+=lst_z
    six_atoms+=lst_a
    six_atoms+=lst_b
    #deduplication
    six_atoms = [list(i) for i in set(tuple(h) for h in six_atoms)]
    grp_num4=len(six_atoms)
    print(f"After deduplication, Selected by three_stategy: {six_atoms} with number of {grp_num4}")
    lst_all_file = open('all_lst', 'w+')
    print(str(six_atoms), file=lst_all_file)
    lst_all_file.close()
    gen_ = Gen_plumed_input(six_atoms)
    gen_.gen_BoreschLike_measure("plumed.dat", "Colvar", 100)

        


